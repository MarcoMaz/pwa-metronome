{"version":3,"sources":["components/Metronome.js","components/Help.js","App.js","serviceWorker.js","index.js"],"names":["ac","engine","beatIndex","barLength","circles","oldActiveIndex","Help","react_default","a","createElement","lastNote","nextNote","Metronome","_useState","useState","_useState2","Object","slicedToArray","isPlaying","setIsPlaying","_useState3","_useState4","bpm","setBpm","_useState5","_useState6","timeSignatureNumerator","setTimeSignatureNumerator","oneBeatInSeconds","oneBeatDurationInMs","lookAhead","document","getElementsByClassName","useEffect","AudioContext","resume","clearInterval","setInterval","currentTime","time","querySelector","classList","remove","osc","createOscillator","connect","destination","start","stop","frequency","value","Number","dataset","index","add","sound","suspend","id","className","toConsumableArray","Array","map","x","i","key","data-index","htmlFor","type","min","max","step","onChange","e","target","onClick","stop_fill","play_fill","App","react_router_dom","react_router","exact","path","component","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","swUpdateReady","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dbc3ba55.chunk.js","sourcesContent":["import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { PlayFill } from 'react-bootstrap-icons';\nimport { StopFill } from 'react-bootstrap-icons';\n\nlet ac\nlet engine\nlet lastNote = 0\nlet nextNote = 0\nlet beatIndex\nlet barLength \nlet circles\nlet oldActiveIndex\n\n\nconst Metronome = () => {\n  const [ isPlaying, setIsPlaying ] = useState( false )\n  const [ bpm, setBpm ] = useState( 100 )\n  const [ timeSignatureNumerator, setTimeSignatureNumerator ] = useState( 3 )\n  const oneBeatDurationInMs = (bpm) => 60000 / bpm                // 60.000 ms = 1 minute\n  const oneBeatInSeconds = oneBeatDurationInMs( bpm ) / 1000     \n  const lookAhead = oneBeatInSeconds / 2                          // Lookahead looks one beat forward in time\n  const active = '-active'\n\n  circles = document.getElementsByClassName('Circles_beat')               // Select all the circles\n\n  useEffect(() => {\n    ac = new AudioContext()\n    barLength = timeSignatureNumerator - 1\n    \n    const sound = ( ac, time ) => {\n\n      // Remove the old active class after re-render\n      oldActiveIndex = document.querySelector('.-active')\n      if ( oldActiveIndex !== null ) oldActiveIndex.classList.remove( active )\n\n      // Remove active class from previous beat\n      if ( beatIndex > 0 ){\n        circles[ beatIndex - 1 ].classList.remove( active )\n      } else {\n        circles[ barLength ].classList.remove( active )\n      }\n\n      // creates the sound, connects it and decides when it starts and stops\n      let osc = ac.createOscillator()\n      osc.connect( ac.destination )\n      osc.start( time )                             \n      osc.stop( time + 1/16 )    \n\n      // If is the first beep, plays a higher sound\n      if ( beatIndex  === 0) {\n        osc.frequency.value = '800'\n      } else {\n        osc.frequency.value = '400'\n      }\n\n      // Add active class based on index on active beat\n      if ( Number( circles[ beatIndex ].dataset.index ) === beatIndex ) {\n        circles[ beatIndex ].classList.add( active )\n      } \n\n      // If the beat reaches the end, starts over and resets the counter\n      ( beatIndex === barLength ) ? beatIndex = 0 : beatIndex += 1\n    }\n\n    const timer = () => {\n      // Calculates how long it was in ms from loading the browser to clicking the play button\n      const diff = ac.currentTime - lastNote\n\n      // Schedules the next note if the diff is larger then the setInterval\n      if ( diff >= lookAhead ) {\n        nextNote = lastNote + oneBeatInSeconds\n        lastNote = nextNote\n        sound( ac, nextNote )\n      }\n    }\n\n    if ( isPlaying ){\n      // If the metronome is playing resumes the audio context                       \n      ac.resume()           \n      clearInterval( engine )      \n      engine = setInterval( timer, oneBeatInSeconds / 25.0) \n    } else {\n      // If the metronome is stopped, resets all the values                               \n      ac.suspend()\n      clearInterval( engine )                 \n      lastNote = 0\n      nextNote = 0\n      beatIndex = 0\n    }\n\n    return () => clearInterval(engine)\n  })\n\n  // If the BPM changes, suspend the context and resets all the values\n  const handleChangeBPM = ( e ) => {\n    ac.suspend()\n    setBpm( e.target.value )\n    lastNote = 0\n    nextNote = 0  \n    beatIndex = 0\n  }\n    \n  // If the time signature changes, suspend the context and resets all the values\n  const handleTimeSignatureNumerator = ( e ) => {\n    ac.suspend()\n    setTimeSignatureNumerator( Number( e.target.value ) )\n    lastNote = 0\n    nextNote = 0\n    beatIndex = 0\n  }\n\n  // By clicking the button starts or stops the metronome\n  const toggleButton = () => ( isPlaying === true ) ? setIsPlaying( false ) : setIsPlaying( true )\n\n  return(\n    <div id=\"metronome\">\n      <div className=\"Circles\">{\n        [...Array(timeSignatureNumerator)].map((x, i) => (\n          <div key={ i } data-index={ i } className={ 'Circles_beat' + ( isPlaying ? ' Circles_beat--plays' : '' )}>\n          </div>))}\n      </div>\n      <div className=\"TimeSignature\">\n        <label className=\"TimeSignature__label\" htmlFor='TimeSignature__Input'>\n          <div className=\"TimeSignature__label__numerator\">{ timeSignatureNumerator }</div>\n          <hr className=\"TimeSignature__label__divider\" />\n          <div className=\"TimeSignature__label__denominator\">4</div>\n        </label>\n        <input className=\"TimeSignature__input\" id='TimeSignature__input' \n          type='range' min='2' max='20' step='1' \n          onChange={ handleTimeSignatureNumerator } value={ timeSignatureNumerator }/>\n      </div>\n      <div className=\"Bpm\">\n        <label className=\"Bpm_label\" htmlFor='Bpm_input'>{ bpm } BPM</label>\n        <input className=\"Bpm_input\" id='Bpm_input' \n        type='range' min='40' max='200' step='1' \n        onChange={ handleChangeBPM } value={ bpm } />\n      </div>\n      <button className=\"PlayButton\" onClick={ toggleButton }>\n        { !isPlaying ? <PlayFill /> : <StopFill /> }\n      </button>\n    </div>\n  )\n}\n\nexport default Metronome","import React from 'react';\n\nconst Help = () => {\n  return(\n    <div>I'm the helper</div>\n  )\n}\n\nexport default Help","import React from 'react';\nimport './App.scss';\n\nimport Help \t\t    from './components/Help'\nimport Metronome \t\tfrom './components/Metronome'\n\nimport {  BrowserRouter as Router, \n          Route,\n          Link \n} from 'react-router-dom'\n\nconst App = () => {\n  return(\n    <Router>\n      <Route exact path=\"/\" component={Metronome}/>\n      <Route path=\"/help\" component={Help}/>\n      <ul>\n        <li><Link to=\"/\">HOME</Link></li>\n        <li><Link to=\"/help\"><span>Help</span></Link></li>\n  \t\t</ul>\n    </Router>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n              window.swUpdateReady = true;\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}